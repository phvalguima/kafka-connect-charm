# Copyright 2021 pguimaraes
# See LICENSE file for licensing details.
options:
  distro:
    default: 'confluent'
    type: string
    description: |
      Only two values possible: apache or confluent. Defines if will use apache kafka
      or confluent distro to install kafka packages. Both distro and version
      should be set.
  install_method:
    default: 'package'
    type: string
    description: |
      There are two possible values: package or archive. If archive, it will upload the tarball set
      in the resource of this charm. Archive method is EXPERIMENTAL for this charm.
  confluent_license_topic:
    default: "_confluent-license"
    type: string
    description: |
      Topic used for storing Confluent license
  cluster-count:
    default: 3
    type: int
    description: |
      The minimum amount of units to bootstrap the cluster
  version:
    default: '6.1'
    type: string
    description: |
      Sets the kafka version for the given distro.
  api_ip:
    default: ''
    type: string
    description: |
      VIP that is associated with the api_url configuration, if available.
  api_url:
    default: ''
    type: string
    description: |
      URL: overrides the value used by default to set the API endpoint.
      If unset, the hostname of the advertised address for the connect interface will be used.
  api_is_public:
    default: False
    type: boolean
    description: |
      In the case a Load Balancer is being requested, set if the VIP / URL should be public or not
  kafka-connect-cluster-name:
    default: "juju-kafka-connect"
    type: string
    description: |
      Kafka connect cluster name to be used to identify this cluster on MDS service.
      Confluent only
  sasl-protocol:
    default: ''
    type: string
    description: |
      Define which of the SASL protocols should be used for authentication. In the case of Zookeeper,
      only kerberos and digest methods are available.
  mds_public_key_path:
    default: "/var/ssl/private/public.pem"
    type: string
    description: |
      Path to be used to store the public key that will encrypt the oauthbearer token
  mds_user:
    default: ''
    type: string
    description: |
      Set MDS user for the OAUTHBEARER. Only available on Confluent distro.
      In case Brokers are configured for LDAP, then mds_user should be the LDAP user for kafka_rest.
  mds_password:
    default: ''
    type: string
    description: |
      Set mds password for the OAUTHBEARER. Only available on Confluent distro.
      In case Brokers are configured for LDAP, then mds_user should be the LDAP user for kafka_rest.
  kerberos-admin-hostname:
    default: ''
    type: string
    description: |
      Set the kerberos admin hostname to authenticate with.
  kerberos-kdc-hostname:
    default: ''
    type: string
    description: |
      Set the kerberos kdc hostname to authenticate with.
  kerberos-protocol:
    default: ''
    type: string
    description: |
      Set the kerberos protocol. This will form the principal such as: {{protocol}}/<hostname>@<realm>
  kerberos-realm:
    default: ''
    type: string
    description: |
      Set the kerberos realm value.
  kerberos-domain:
    default: ''
    type: string
    description: |
      Defines the kerberos domain for the host: {{protocol}}/<name of the host>.<kerberos-domain>@<realm>
      The value set here should be the domain for the default gateway's IP.
  keystore-path:
    default: '/var/ssl/private/zookeeper.keystore.jks'
    type: string
    description: |
      Path to the keystore
  truststore-path:
    default: ''
    type: string
    description: |
      Path to the truststore
  listener-keystore-path:
    default: ''
    type: string
    description: |
      Path to the keystore for listener relation
  listener-truststore-path:
    default: ''
    type: string
    description: |
      Path to the truststore for the listener relation
  keystore-sr-path:
    default: ''
    type: string
    description: |
      Path to the keystore for schema registry relation
  truststore-sr-path:
    default: ''
    type: string
    description: |
      Path to the truststore for the schema registry relation
  regenerate-keystore-truststore:
    default: True
    type: boolean
    description: |
      If set to True, force charm to regenerate trust and keystore for every charm changes.
      Setting to False is still EXPERIMENTAL
  group-id:
    default: "connect-cluster"
    type: string
    description: |
      Group.id to be used in the Connect configuration.
      Customize if configuring several Kafka Connect clusers
  client-auth:
    default: False
    type: boolean
    description: |
      Enables mutual authentication via TLS for clients.
  connector-client-config-override-policy:
    default: "All"
    type: string
    description: |
      Define how the client connectors can override Connect configuration.
      More details: https://cwiki.apache.org/confluence/display/KAFKA/KIP-458%3A+Connector+Client+Config+Override+Policy
  internal-converter:
    default: "org.apache.kafka.connect.json.JsonConverter"
    type: string
    description: |
      When running in a distributed fashion, Connect stores its metadata in a topic within Kafka.
      That topic can have its own converter. This option is mostly deprecated and advise is to keep default
      values as specified here:
      https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/
      Internal converter is never mapped to schema registry(internal.key/value.converter.schemas.enable=False)
  debug:
    default: False
    type: boolean
    description: |
      If set to true, enables debug on the units.
  protocol:
    default: "https"
    type: string
    description: |
      Protocol type between http and https to be used between Schema Registry instances and its clients.
  resource-extension-class:
    default: "io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension"
    type: string
    description: |
      Resource extension class to be set on schema registry properties.
  ssl_cert:
    default: ''
    type: string
    description: |
      Certificate + CA chain to be used in base64. Format to be converted should be:
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl_key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  ssl_listener_cert:
    default: ''
    type: string
    description: |
      Certificate for the listener relation.
      Certificate with CA certificate chain to be used in base64
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl_listener_key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  ssl_sr_cert:
    default: ''
    type: string
    description: |
      Certificate for the schema registry relation.
      Certificate with CA certificate chain to be used in base64
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl_sr_key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  user:
    default: 'cp-kafka-connect'
    type: string
    description: |
      User set for kafka broker services
  group:
    default: 'confluent'
    type: string
    description: |
      Group set for kafka broker services
  clientPort:
    type: int
    default: 8083
    description: |
      Port to be used to listen for client connections.
      Used for the REST API access to the Kafka Connect cluster.
  log4j-root-logger:
    type: string
    default: "INFO, stdout, connectAppender"
    description: |
      Set value for root logger on Schema Registry.
  listener:
    default: "https://0.0.0.0"
    type: string
    description: |
      Listener address and protocol to be used. The listener field is generated with this value
      and the clientPort.
  service-environment-overrides:
    type: string
    description: |
      YAML formatted list of extra arguments to be added to [Environment] field of the service.
      If Schema Registry secrets protection is enabled, set: CONFLUENT_SECURITY_MASTER_KEY to the masterkey.
    default: |
       SCHEMA_REGISTRY_HEAP_OPTS: "-Xms1g -Xmx1g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
       KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/kafka/zookeeper-log4j.properties"
       LOG_DIR: "/var/log/schema-registry"
  service-unit-overrides:
    type: string
    default: ''
    description: |
      YAML formatted list of extra arguments to be added to [Unit] field of the service
  service-overrides:
    type: string
    description: |
      YAML formatted list of extra arguments to be added to [Service] field of the service.
      User, Group are overrided by the respective configs on the charm.
    default: ''
  plugin-path:
    default: "/usr/share/java"
    type: string
    description: |
      Place to store the Connector plugins
  connect-distributed-properties:
    type: string
    description: |
      Settings to be added to connect-distributed.properties file.
      YAML formatted list of items
      If secrets is set, also use: rest.extension.classes: io.confluent.connect.secretregistry.ConnectSecretRegistryExtension
      If LDAP is set for confluent, set: rest.servlet.initializor.classes: io.confluent.connect.security.ConnectSecurityExtension
    default: |
      status.storage.replication.factor: 3
      status.storage.topic: connect-cluster-status
      offset.flush.interval.ms: 10000
      offset.storage.replication.factor: 3
      offset.storage.topic: connect-cluster-offsets
      config.storage.replication.factor: 3
      config.storage.topic: connect-cluster-configs
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      rest.extension.classes: io.confluent.connect.security.ConnectSecurityExtension,io.confluent.connect.secretregistry.ConnectSecretRegistryExtension
  jmx_exporter_version: 
    default: "0.12.0"
    type: string
    description: |
      Value set for the version of the JMX Exporter.
  jmx_exporter_url:
    default: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/{}/jmx_prometheus_javaagent-{}.jar"
    type: string
    description: |
      Maven's URL from where JMX jar can be downloaded.
      Replace the version value with "{}" for the versions.
  jmx-exporter-port: 
    default: 9404
    type: int
    description: |
      Port to be exposed by the exporter for prometheus.
  jmx_exporter_labels: 
    default: ""
    type: string
    description: |
      Comma-separated list of key=value tags.
  jmx_exporter_use_internal: 
    default: false
    type: boolean
    description: |
      Use the internal or advertised address in the prometheus relation.
      If False, the advertised address will be used.   
  nagios_context:
    default: "juju"
    type: string
    description: |
      Used by the nrpe subordinate charms. A string that will be prepended
      to instance name to set the host name in nagios. So for instance the
      hostname would be something like: juju-myservice-0 If you're running
      multiple environments with the same services in them this allows you
      to differentiate between them.    
